@using Kendo.Mvc.UI
@model MvcTemplate.Web.ViewModels.Home.IrregularityViewModel
@Html.ValidationSummary(true, "", new { @class = "text-danger" })
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.ImageId)
<div class="form-group">
    @Html.LabelFor(model => model.Title, "Title", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group">
    @Html.LabelFor(model => model.CategoryId, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @(Html.Kendo().DropDownList()
            .Name("CategoryId")
            .DataValueField("Id")
            .DataTextField("Name")
            .BindTo((System.Collections.IEnumerable)ViewData["categories"])
        )
        @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group">
    @Html.LabelFor(model => model.Description, "Description", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Kendo().EditorFor(model => model.Description).Name("Descripton")
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>
</div>
<script>
    function onSuccess(e) {
        $('#ImageId').val(e.response.imageId).trigger("change");
    }
</script>
<div class="form-group">
    @Html.Label("Image", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Kendo().Upload().Name("upload").Multiple(false).Async(async => async.Save("Upload", "Files", new { area = string.Empty })).Events(c => c.Success("onSuccess"))
    </div>
</div>